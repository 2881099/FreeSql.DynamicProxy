<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FreeSql.DynamicProxy</name>
    </assembly>
    <members>
        <member name="T:FreeSql.DynamicProxy">
            <summary>
            DynamicProxy 快速使用类
            </summary>
        </member>
        <member name="M:FreeSql.DynamicProxy.ToDynamicProxy``1(``0)">
            <summary>
            创建 对象 source 的 FreeSql.DynamicProxy 代理对象<para></para>
            有可能返回 source 本身（当不需要动态代理的时候）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="P:FreeSql.DynamicProxyBeforeArguments.Sender">
            <summary>
            代理对象
            </summary>
        </member>
        <member name="P:FreeSql.DynamicProxyBeforeArguments.InjectorType">
            <summary>
            生效的类型
            </summary>
        </member>
        <member name="P:FreeSql.DynamicProxyBeforeArguments.MemberInfo">
            <summary>
            方法或属性反射信息
            </summary>
        </member>
        <member name="P:FreeSql.DynamicProxyBeforeArguments.Parameters">
            <summary>
            方法或属性，执行时候的参数值
            </summary>
        </member>
        <member name="P:FreeSql.DynamicProxyBeforeArguments.Attribute">
            <summary>
            生效的特性
            </summary>
        </member>
        <member name="P:FreeSql.DynamicProxyBeforeArguments.IsReturn">
            <summary>
            是否拦截，在代理层作为判断条件，设置 ReturnValue 值时生效
            </summary>
        </member>
        <member name="P:FreeSql.DynamicProxyBeforeArguments.ReturnValue">
            <summary>
            拦截自定义返回值<para></para>
            如果方法返回类型为 void，设置 null 即可
            </summary>
        </member>
        <member name="P:FreeSql.DynamicProxyBeforeArguments.AfterBag">
            <summary>
            Before/After 共用包
            </summary>
        </member>
        <member name="P:FreeSql.DynamicProxyAfterArguments.Sender">
            <summary>
            代理对象
            </summary>
        </member>
        <member name="P:FreeSql.DynamicProxyAfterArguments.InjectorType">
            <summary>
            生效的类型
            </summary>
        </member>
        <member name="P:FreeSql.DynamicProxyAfterArguments.MemberInfo">
            <summary>
            方法或属性反射信息
            </summary>
        </member>
        <member name="P:FreeSql.DynamicProxyAfterArguments.Parameters">
            <summary>
            方法或属性，执行时候的参数值
            </summary>
        </member>
        <member name="P:FreeSql.DynamicProxyAfterArguments.Attribute">
            <summary>
            生效的特性
            </summary>
        </member>
        <member name="P:FreeSql.DynamicProxyAfterArguments.BeforeBag">
            <summary>
            Before/After 共用包
            </summary>
        </member>
        <member name="P:FreeSql.DynamicProxyAfterArguments.Exception">
            <summary>
            发生的错误
            </summary>
        </member>
        <member name="P:FreeSql.DynamicProxyAfterArguments.ExceptionHandled">
            <summary>
            发生异常时，是否处理异常<para></para>
            false: 抛出异常 (默认)
            true: 不抛出异常 (继续执行)
            </summary>
        </member>
        <member name="F:FreeSql.DynamicProxyInjectorType.Method">
            <summary>
            方法代理
            </summary>
        </member>
        <member name="F:FreeSql.DynamicProxyInjectorType.PropertyGet">
            <summary>
            属性Get代理
            </summary>
        </member>
        <member name="F:FreeSql.DynamicProxyInjectorType.PropertySet">
            <summary>
            属性Set代理
            </summary>
        </member>
        <member name="T:FreeSql.DynamicProxyAttribute">
            <summary>
            实现该特性，标记的方法/属性支持动态代理
            </summary>
        </member>
        <member name="M:FreeSql.DynamicProxyAttribute.Before(FreeSql.DynamicProxyBeforeArguments)">
            <summary>
            方法执行之前
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.DynamicProxyAttribute.After(FreeSql.DynamicProxyAfterArguments)">
            <summary>
            方法执行之前
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:FreeSql.DynamicProxyExtensions.CSharpFullName(System.Type)">
            <summary>
            获取 Type 的原始 c# 文本表示
            </summary>
            <param name="that"></param>
            <returns></returns>
        </member>
    </members>
</doc>
